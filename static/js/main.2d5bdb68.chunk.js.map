{"version":3,"sources":["App.js","Quote.js","serviceWorkerRegistration.js","index.js"],"names":["App","props","state","useState","name","names","setNames","input","setInput","useEffect","localStorage","setItem","JSON","stringify","w","p","map","index","onChange","event","value","target","placeholder","marginLeft","onClick","storedNames","parse","getItem","push","console","log","colorScheme","Quote","author","quote","setQuote","fetch","then","resp","json","jsonObj","content","catch","errr","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2d5bdb68.chunk.js","sourcesContent":["import './App.css';\nimport PropTypes from \"prop-types\";\nimport {useEffect, useState} from \"react\";\nimport { Input,Button,Box,Flex,Text } from \"@chakra-ui/react\"\n\nexport default function App(props, state) {\n\n    const [names, setNames] = useState([props.name]);\n    const [input, setInput] = useState();\n\n    useEffect(() => {\n        localStorage.setItem('names', JSON.stringify(names));\n        // eslint-disable-next-line\n    }, []);\n\n\n    function inputChanged(event) {\n        const {target: {value}} = event;\n        setInput(value)\n    }\n\n    function saveName(event) {\n        // debugger;\n        let storedNames = JSON.parse(localStorage.getItem('names'))\n        storedNames.push(input)\n        localStorage.setItem('names', JSON.stringify(storedNames));\n        console.log(storedNames)\n        setNames(storedNames)\n    }\n\n    return (\n        <Box w=\"100%\" p={4}>\n            {names.map((name, index) =>\n                <Text key={index}>\n                    {name}\n                </Text>\n            )}\n\n            <Flex>\n                <Input onChange={inputChanged} placeholder=\"Name\"/>\n                <Button marginLeft={2} onClick={saveName} colorScheme=\"gray\">Save</Button>\n            </Flex>\n        </Box>\n    );\n}\n\nApp.propTypes = {\n    name: PropTypes.string\n};","import './App.css';\nimport {Box, Heading, Container,Text} from \"@chakra-ui/react\"\nimport {useEffect, useState} from \"react\"\n\nexport default function Quote() {\n\n    const [quote, setQuote]  = useState({author: '', quote: ''});\n\n\n    useEffect(() => {\n        fetch('http://api.quotable.io/random')\n            .then(resp => resp.json())\n            .then(jsonObj => setQuote({\n                author:jsonObj.author,\n                quote:jsonObj.content,\n            }))\n            .catch((errr) => console.error(\"Error: \"+errr));\n\n    }, []);\n\n    return (\n        <Container>\n            <Box>\n                <Heading>\n                    {quote.quote}\n                </Heading>\n                <Text>\n                    {quote.author}\n                </Text>\n            </Box>\n        </Container>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {ChakraProvider, Divider,Container} from \"@chakra-ui/react\"\nimport Quote from \"./Quote\";\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <ChakraProvider>\n            <Container>\n                <App name={\"Janez\"}/>\n                <Divider/>\n                <Quote/>\n            </Container>\n        </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}